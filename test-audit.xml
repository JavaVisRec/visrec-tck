<?xml version="1.0" encoding="UTF-8"?>
<specification xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns="http://github.com/JavaVisRec/visrec-tck/audit"
               xsi:schemaLocation="http://github.com/JavaVisRec/visrec-tck/audit"
               name="JSR 381 Visual Recognition" version="1.0.0" id="JSR 381"
               generateSectionIds="false">
    <!-- Disabled the setup of the TCK because the setup is not required as of now. Enable and modify
    the section if it's needed. -->
    <!-- <section id="0" title="TCK Setup">
        Tests class TCKSetupTest
        <group>
            <text>Tests the correct setup of the TCK</text>
            <assertion id="Setup">
                <text>Ensure an implementation of
                    org.javamoney.tck.JSR354TestConfiguration is registered using the
                    java.util.ServiceLoader.
                </text>
            </assertion>
        </group>
    </section> -->
    <section id="1" title="Introduction, Use Cases, Requirements (no tests)"/>
    <section id="2" title="Use Cases"/>
    <section id="3" title="Requirements"/>
    <section id="3.1" title="Core Requirements"/>
    <section id="3.4" title="Non Functional Requirements"/>

    <section id="4" title="Specification"/>

    <!-- **************************************************************** ****
        Core API **************************************************************** -->
    <section id="4.1" title="Package and Project Structure"/>
    <section id="4.1.1" title="Package Overview"/>
    <section id="4.1.2" title="Module/Repository Overview"/>
    <section id="4.2" title="Visual Recognition Core API"/>
    <section id="4.2.1" title="Service Provider Usability">
        <group>
            <text>A. Accessing the Service Provider</text>
            <assertion id="421-A1">
                <text>Ensure there's a minimum of a single implementation of the Service Provider</text>
            </assertion>
        </group>
        <group>
            <text>B. Obtain Services from the Service Provider</text>
            <assertion id="421-B2">
                <text>Obtain the implementation of ClassifierService through the Service Provider</text>
            </assertion>
            <assertion id="421-B3">
                <text>Obtain the implementation of ImageFactoryService through the Service Provider</text>
            </assertion>
            <assertion id="421-B4">
                <text>Obtain the implementation of ImplementationService through the Service Provider</text>
            </assertion>
        </group>
        <group>
            <text>C. BuilderService (deprecated)</text>
        </group>
        <group>
            <text>D. ClassifierService</text>
            <assertion id="421-D1">
                <text>Must use the ImageClassifier.BuildingBlock to return an implemented and trained classification
                    model as ImageClassifier.
                </text>
            </assertion>
            <assertion id="421-D2">
                <text>Must use the BinaryClassifier.BuildingBlock to return an implemented and trained classification
                    model as BinaryClassifier.
                </text>
            </assertion>
        </group>
        <group>
            <text>E. ImageFactoryService</text>
            <assertion id="421-E1">
                <text>Must be able to return an Optional after calling getByImageType(...)</text>
            </assertion>
            <assertion id="421-E2">
                <text>Must be able to return an implementation of the ImageFactory that is able to handle type of
                    BufferedImage.
                </text>
            </assertion>
        </group>
        <group>
            <text>F. ImplementationService</text>
            <assertion id="421-F1">
                <text>Must be able to return the name of the implementation which may not be empty nor null.</text>
            </assertion>
            <assertion id="421-F2">
                <text>Must be able to return the version of the implementation which may not be empty nor null.</text>
            </assertion>
        </group>
    </section>
    <section id="4.2.2" title="Classification"/>
    <section id="4.2.2.1" title="Creation and Usage of the ImageClassifier">
        <group>
            <text>A. Building the ImageClassifier</text>
            <assertion id="4221-A1">
                <text>Create an ImageClassifier using the building blocks in the builder design pattern.</text>
            </assertion>
            <assertion id="4221-A2">
                <text>Create an ImageClassifier using a Map of configuration key-value which reflect to the methods
                    of the building blocks.
                </text>
            </assertion>
            <assertion id="4221-A3">
                <text>Creating an ImageClassifier using the Map of configuration key-value which contain invalid value
                    typesÂ§
                    corresponding to the key. It must throw a ClassifierCreationException.
                </text>
            </assertion>
        </group>
        <group>
            <text>B. Using the ImageClassifier</text>
            <assertion id="4221-B1">
                <text>Use a created ImageClassifier to classify MNIST and verify the output formation (not the
                    accuracy). The key must
                    be the label and the value must be the float of accuracy. Input must be a file
                </text>
            </assertion>
            <assertion id="4221-B2">
                <text>Classify input using a InputStream object as input for the ImageClassifier.</text>
            </assertion>
            <assertion id="4221-B3">
                <text>Classify input using a BufferedImage object as input for the ImageClassifier.</text>
            </assertion>
            <assertion id="4221-B4">
                <text>Attempt to classify input which is not an image and can't be transformed to a BufferedImage using
                    a InputStream object as input.
                    It must throw a ClassificationException.
                </text>
            </assertion>
            <assertion id="4221-B5">
                <text>Attempt to classify input which is not an image and can't be transformed to a BufferedImage using
                    a Path object as input.
                    It must throw a ClassificationException.
                </text>
            </assertion>
        </group>
    </section>
    <section id="4.2.2.2" title="Creation and Usage of the BinaryClassifier">
        <group>
            <text>A. Building the BinaryClassifier</text>
            <assertion id="4222-A1">
                <text>Create a BinaryClassifier using the building blocks in the builder design pattern.</text>
            </assertion>
            <assertion id="4222-A2">
                <text>Creating a BinaryClassifier using the Map of configuration key-value which contain invalid value
                    types
                    corresponding to the key. It must throw a ClassifierCreationException.
                </text>
            </assertion>
        </group>
        <group>
            <text>B. Using the BinaryClassifier</text>
            <assertion id="4222-B1">
                <text>Use a created BinaryClassifier to classify SPAM and verify the output. The output must either
                    return true or false.
                </text>
            </assertion>
            <assertion id="4222-B2">
                <text>Classify input using a Path object as input for the ImageClassifier.</text>
            </assertion>
            <assertion id="4222-B3">
                <text>Classify input using a InputStream object as input for the ImageClassifier.</text>
            </assertion>
        </group>
    </section>
    <!--    <section id="4.2.3" title="Object Detection"/>-->
    <section id="4.2.4" title="Regression"/>
    <section id="4.2.5" title="Evaluation"/>
    <section id="4.2.6" title="Input to Image Transformation"/>
    <section id="4.2.6.1" title="ImageFactory Usability">
        <group>
            <text>A. Create output using ImageFactory implementations</text>
            <assertion id="4261-A1">
                <text>Each implementation must be able to return non-null output using a Path object as input.</text>
            </assertion>
            <assertion id="4261-A2">
                <text>Each implementation must be able to return non-null output using an InputStream object as input.
                </text>
            </assertion>
            <assertion id="4261-A3">
                <text>Each implementation must be able to return non-null output using a URL object as input.</text>
            </assertion>
            <assertion id="4261-A4">
                <text>Each implementation must throw an IOException if the Path input is not an image.</text>
            </assertion>
            <assertion id="4261-A5">
                <text>Each implementation must throw an IOException if the InputStream input is not an image.</text>
            </assertion>
            <assertion id="4261-A6">
                <text>Each implementation must throw an IOException if the URL input is not an image.</text>
            </assertion>
        </group>
    </section>

    <!--<section id="4.2.1" title="Modelling of Currencies">-->
    <!--&lt;!&ndash; Tests class ModellingCurrenciesTest &ndash;&gt;-->
    <!--<group>-->
    <!--<text>A. Managing the Currency code</text>-->
    <!--<assertion id="421-A1">-->
    <!--<text>Ensure at least one javax.money.CurrencyUnit implementation-->
    <!--is-->
    <!--available and registered/accessible from Monetary.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-A2">-->
    <!--<text>Test that currencies returned for same ISO currency code are-->
    <!--equal, ensure when listing all available currencies, that the-->
    <!--code-->
    <!--is unique.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-A3">-->
    <!--<text>Ensure all ISO 3-letters codes as defined by the JDK are also-->
    <!--available from Monetary.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-A4">-->
    <!--<text>Test that JDK currencies returned-->
    <!--match the values of-->
    <!--corresponding JDK Currency (code, numeric code,-->
    <!--default fraction-->
    <!--digits).-->
    <!--</text>-->
    <!--</assertion>-->
    <!--</group>-->
    <!--<group>-->
    <!--<text>B. Currency Unit Implementation Requirements</text>-->
    <!--<assertion id="421-B1">-->
    <!--<text>CurrencyUnit must implement hashCode.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-B2">-->
    <!--<text>CurrencyUnit must implement equals.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-B3">-->
    <!--<text>CurrencyUnit implementation must be Comparable.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-B4">-->
    <!--<text>CurrencyUnit implementation must be immutable.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-B5" testable="false">-->
    <!--<text>CurrencyUnit implementation must be thread safe.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--<assertion id="421-B6">-->
    <!--<text>CurrencyUnit implementation must be serializable.-->
    <!--</text>-->
    <!--</assertion>-->
    <!--</group>-->
    <!--</section>-->

    <!--<section id="5" title="Meta-Data Contexts and Query Models"> -->
    <!-- Tested with API -->
    <!-- </section> -->
    <!-- <section id="5.1" title="Overview"/>
    <section id="5.2" title="AbstractContext"/>
    <section id="5.3" title="AbstractContextBuilder"/>
    <section id="5.3" title="AbstractQuery"/>
    <section id="5.3" title="AbstractQueryBuilder"/>

    <section id="6" title="Implementation Recommendations"/>
    <section id="6.1" title="Overview"/>
    <section id="6.2" title="Monetary Arithmetic"/>
    <section id="6.3" title="Numeric Precision"/> -->

    <section id="7" title="Examples"/>
</specification>
